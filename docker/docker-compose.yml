version: '3.9'

services:

  # https://github.com/Tecnativa/docker-socket-proxy
  socket-proxy:
    image: tecnativa/docker-socket-proxy
    environment:
      - CONTAINERS=1
      - NETWORKS=1
      - NODES=1
      - SERVICES=1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      socket-net: null
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
        max_attempts: 20
        window: 10s
        delay: 3s
      resources:
        limits:
          cpus: "0.5"
          memory: "0.05G"
        reservations:
          cpus: "0.5"
          memory: "0.05G"

  traefik-router:
    image: ${traefik_image:-traefik:latest}
    networks:
      socket-net: null
      internal-net: null
    command: --api.insecure=true --providers.docker
      --providers.docker.exposedbydefault=false
      --providers.docker.constraints="Label(`mynode_name`,`${NODE_NAME:-mymaster}`)"
      --providers.docker.endpoint="tcp://socket-proxy:2375"
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: ingress
      - target: 8080
        published: 8080
        protocol: tcp
        mode: ingress
    deploy:
      mode: global
      update_config:
        parallelism: 1
        delay: 3s
      restart_policy:
        condition: any
        max_attempts: 20
        window: 10s
        delay: 3s
      resources:
        limits:
          cpus: "2"
          memory: "0.5G"
        reservations:
          cpus: "0.5"
          memory: "0.2G"

  backend:
    image: ${api_image:-127.0.0.1:5000/test-api:latest}
    environment:
      - PORT=${API_PORT:-8000}
    networks:
      internal-net:
        aliases:
          - internal-net-test-api
          - test-api
    labels:
      - "mynode_name=${NODE_NAME:-mymaster}"

      - "traefik.enable=true"

      - "traefik.http.routers.backend.rule=(PathPrefix(`/api`) &&
        Method(`POST`)) || (PathPrefix(`/health`) && Method(`GET`))"
      - "traefik.http.routers.backend.middlewares=apiHeaders"

      - "traefik.http.services.backend.loadbalancer.server.port=${API_PORT:-800\
        0}"

      - "traefik.http.services.backend.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.backend.loadbalancer.healthcheck.interval=60s"
      - "traefik.http.services.backend.loadbalancer.healthcheck.timeout=10s"

      - "traefik.http.middlewares.apiHeaders.headers.framedeny=true"
      - "traefik.http.middlewares.apiHeaders.headers.browserxssfilter=true"
      - "traefik.http.middlewares.apiHeaders.headers.customrequestheaders.X-Req\
        uest-API-Name=api-app-req"
      - "traefik.http.middlewares.apiHeaders.headers.customresponseheaders.X-Re\
        sponse-API-Name=api-app-resp"
      - "traefik.http.middlewares.apiHeaders.headers.accesscontrolalloworiginli\
        st=*"
      - "traefik.http.middlewares.apiHeaders.headers.accesscontrolallowmethods=\
        POST"

    deploy:
      mode: replicated
      replicas: ${API_REPLICAS:-2}
      placement:
        max_replicas_per_node: ${API_NODE_REPLICAS:-5}
        constraints:
          - node.labels.mynode_name == ${NODE_NAME:-mymaster}
      update_config:
        parallelism: 1
        delay: 3s
      restart_policy:
        condition: any
        max_attempts: 20
        window: 10s
        delay: 3s
      resources:
        limits:
          cpus: "1"
          memory: "0.5G"
        reservations:
          cpus: "0.5"
          memory: "0.2G"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--spider",
          "http://127.0.0.1:${API_PORT:-8000}/health"
        ]
      interval: 15s
      timeout: 10s
      retries: 3

  static:
    image: ${static_image:-127.0.0.1:5000/test-static:latest}
    environment:
      - PORT=${STATIC_PORT:-3000}
    networks:
      internal-net:
        aliases:
          - internal-net-test-static
          - test-static
    labels:
      - "mynode_name=${NODE_NAME:-mymaster}"

      - "traefik.enable=true"

      - "traefik.http.routers.static.rule=PathPrefix(`/`) && Method(`GET`,
        `HEAD`)"
      - "traefik.http.routers.static.middlewares=staticHeaders"

      - "traefik.http.services.static.loadbalancer.server.port=${STATIC_PORT:-3\
        000}"

      - "traefik.http.services.static.loadbalancer.healthcheck.path=/"
      - "traefik.http.services.static.loadbalancer.healthcheck.interval=60s"
      - "traefik.http.services.static.loadbalancer.healthcheck.timeout=10s"

      - "traefik.http.middlewares.staticHeaders.headers.framedeny=true"
      - "traefik.http.middlewares.staticHeaders.headers.browserxssfilter=true"
      - "traefik.http.middlewares.staticHeaders.headers.customrequestheaders.X-\
        Request-Static-Name=static-app-req"
      - "traefik.http.middlewares.staticHeaders.headers.customresponseheaders.X\
        -Response-Static-Name=static-app-resp"
      - "traefik.http.middlewares.staticHeaders.headers.accesscontrolalloworigi\
        nlist=*"
      - "traefik.http.middlewares.staticHeaders.headers.accesscontrolallowmetho\
        ds=GET,HEAD"

    deploy:
      mode: replicated
      replicas: ${STATIC_REPLICAS:-3}
      placement:
        max_replicas_per_node: ${STATIC_NODE_REPLICAS:-5}
        constraints:
          - node.labels.mynode_name == ${NODE_NAME:-mymaster}
      update_config:
        parallelism: 1
        delay: 3s
      restart_policy:
        condition: any
        max_attempts: 20
        window: 10s
        delay: 3s
      resources:
        limits:
          cpus: "1"
          memory: "0.5G"
        reservations:
          cpus: "0.5"
          memory: "0.2G"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--spider",
          "http://127.0.0.1:${STATIC_PORT:-3000}"
        ]
      interval: 15s
      timeout: 10s
      retries: 3

networks:
  internal-net: null
  socket-net: null
